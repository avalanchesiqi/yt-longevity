#!/usr/bin/env python
"""
Show how to make date plots in matplotlib using date tick locators and
formatters.  See major_minor_demo1.py for more information on
controlling major and minor ticks

All matplotlib date plotting is done by converting date instances into
days since the 0001-01-01 UTC.  The conversion, tick locating and
formatting is done behind the scenes so this is most transparent to
you.  The dates module provides several converter functions date2num
and num2date

This example requires an active internet connection since it uses
yahoo finance to get the data for plotting
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter, DayLocator
from matplotlib.ticker import FuncFormatter
from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes
from datetime import date, timedelta

STARTDATE = date(2014, 6, 1)
ENDDATE = date(2015, 7, 30)


def nice_format(ax):
    # every 7th day
    days = DayLocator(range(1, 32), interval=14)
    days_fmt = DateFormatter('%d-%b-%y')

    def millions(x, pos):
        'The two args are the value and tick position'
        return '%1.1fM' % (x * 1e-6)

    formatter = FuncFormatter(millions)

    # format the ticks
    ax.xaxis.set_major_locator(days)
    ax.xaxis.set_major_formatter(days_fmt)
    ax.yaxis.set_major_formatter(formatter)
    ax.autoscale_view()

    # format the coords message box
    def view(x):
        return '{0}'.format(x)

    ax.fmt_xdata = DateFormatter('%Y-%m-%d')
    ax.fmt_ydata = view
    ax.grid(True)

    ax.xaxis_date()
    ax.legend(loc='best')


def curve_fit(arr, ax, c='b'):
    n = len(arr)
    train_x = np.arange(1, n+1, 1)
    train_y = np.array(arr)

    idx = np.isfinite(train_y)
    z = np.polyfit(train_x[idx], train_y[idx], 5)
    f = np.poly1d(z)

    x_new = np.linspace(train_x[0], train_x[-1], 1000)
    y_new = f(x_new)
    dates_new = [STARTDATE + timedelta(days=i) for i in x_new]

    ax.plot_date(dates_new, y_new, linestyle='-', marker='', color=c)


def textbox(x):
    mu = x.mean()
    median = np.median(x)
    sigma = x.std()
    textstr = '$\mu=%.2f$\n$\mathrm{median}=%.2f$\n$\sigma=%.2f$' % (mu, median, sigma)
    return textstr


def draw_miss(*args):
    n = (ENDDATE - STARTDATE).days
    dates = [STARTDATE + timedelta(days=i) for i in xrange(n + 1)]

    fig, ax = plt.subplots(1, 1)

    # approximate missing dates
    vids_ts = args[0]
    stats_ts = args[1]
    ax.plot_date(dates, vids_ts, linestyle='-', marker='', color='r', label="distinct id trend")
    ax.plot_date(dates, stats_ts, linestyle='-', marker='', color='b', label="sharing event trend")
    ymin, ymax = ax.get_ylim()
    ax.bar(dates, np.isnan(vids_ts) * ymax, color=(.9, .9, .9))
    # curve_fit(vids_ts, ax, c='r')
    # curve_fit(stats_ts, ax, c='b')
    nice_format(ax)

    # text box and annotate
    x1 = vids_ts[:(date(2014, 12, 25) - date(2014, 6, 1)).days]
    textstr1 = textbox(x1)
    ax.text(date(2014, 9, 1), 1500000, textstr1, style='italic', bbox={'facecolor': 'white', 'pad': 10})

    x2 = stats_ts[:(date(2014, 12, 25) - date(2014, 6, 1)).days]
    textstr2 = textbox(x2)
    ax.text(date(2014, 9, 1), 6000000, textstr2, style='italic', bbox={'facecolor': 'white', 'pad': 10})

    x3 = vids_ts[-(date(2015, 7, 30) - date(2015, 2, 6)).days:]
    textstr3 = textbox(x3)
    ax.text(date(2015, 4, 1), 1500000, textstr3, style='italic', bbox={'facecolor': 'white', 'pad': 10})

    x4 = stats_ts[-(date(2015, 7, 30) - date(2015, 2, 6)).days:]
    textstr4 = textbox(x4)
    ax.text(date(2015, 4, 1), 4000000, textstr4, style='italic', bbox={'facecolor': 'white', 'pad': 10})

    ax.plot(date(2015, 2, 6), 3100976, 'o', c='black')
    ax.annotate('6 Feb 2015\ndrop point', xy=(date(2015, 2, 6), 3100976), xytext=(date(2015, 1, 12), 2700000),
                arrowprops=dict(facecolor='black', shrink=0.05))

    fig.autofmt_xdate()
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    oct2014_before_vids = np.array(
        [1051555, 1061951, 1084709, 1101128, 1096623, 1090618, 1061709, 1059413, 1086945, 1103486, 1107796, 1088352,
         1029798, 1035511, 1008127, 1018587, 1069092, 1081070, 1078401, 1081830, 1055124, 1032302, 1056099, 1085696,
         1094158, 1090975, 1088207, 1073236, 1007915, 1035452, 1063232, 1072253, 1105520, 1092417, 1006233, 994785,
         1053722, 1073531, 1069463, 1070086, 1081753, 1072920, 1022359, 1003104, 1094787, 1081369, 1090068, 1036285,
         1054857, 1014341, 1058640, 1109725, 1097253, 1107460, 1077008, 1058947, 1012280, 1028648, 1096496, 1076231,
         1089305, 1096126, 1067374, 1037051, 1067171, 1096760, 1105087, 1097901, 1094741, 1063317, 1053399, 1070195,
         1102259, 1093093, 1078312, 1047041, 1041582, 1012663, 1046176, 1068725, 1070542, 1084887, 1089521, 1082442,
         1073116, 1090802, 1113230, 1112240, 1111887, 1103354, 1083409, 1052301, 1063561, 1090849, 1071377, 1062598,
         1055562, 1066249, 988553, 1056446, 1075027, 1055736, 1054483, 1048923, 1045233, 1032783, 1058449, 1062085,
         1034037, 1038163, 1035312, 1053922, 1035372, 1034227, 1075426, 1055137, 1052837, 1056555, 1063409, 1048716,
         1030995, 1069718, 1061519, 1054426, 1049569, 1038601, 1040165, 1045488, 1059636, 1051323, 1052799, 1058235,
         1067102, 1053326, 1073259, 1080293, 1064174, 1064106, 1058461, 1068823, 1054521, 1069147, 1086485, 1087450,
         1076860, 1067856, 1064447, 1050694, 1076462, 1102761, 1086704, 1095349, 1051275]
    )
    oct2014_before_stats = np.array(
        [3748117, 4123819, 3756539, 3576142, 3638925, 3678996, 3507410, 3577612, 3779212, 4098770, 3886222, 3756973,
         3569510, 3446890, 3276260, 3492425, 3719782, 3693924, 3671003, 3697473, 4383743, 3449449, 3597928, 3688516,
         3787329, 3949955, 3993017, 4558851, 3253269, 3484958, 4555889, 4450709, 4139079, 4268413, 3906851, 3478591,
         3754386, 5429372, 4107912, 3936256, 4263026, 3928732, 3890089, 3688945, 4128049, 4615518, 3916254, 5951090,
         3992199, 3650435, 3785804, 4486877, 5250928, 4025279, 5184203, 3920396, 3794032, 3790059, 3940459, 4855379,
         4175530, 4165756, 4618061, 3997627, 3936102, 4823111, 4117548, 4746145, 4154903, 4115797, 3817493, 4116781,
         4473896, 4196902, 4084666, 4740988, 4556074, 4005374, 4173440, 4635509, 4619983, 5211903, 5569099, 4385658,
         3975158, 4022544, 4229448, 4323532, 4170793, 4218108, 4056545, 3838394, 3778260, 4086691, 4356447, 4387800,
         3962013, 3896074, 3463264, 3719121, 3832640, 4221657, 3761125, 4782891, 3662766, 4030594, 3788296, 3837038,
         3731499, 3784105, 4724848, 3732692, 4012303, 3671059, 3899401, 3850963, 3858816, 3723634, 3964849, 3733625,
         5583124, 3861755, 4141819, 3891098, 3981928, 3517520, 3738705, 3882457, 3878664, 3885414, 3653677, 4309312,
         3832301, 3662460, 3558146, 3748216, 3890580, 3754254, 3965156, 3671420, 3518191, 3765394, 4004106, 3750042,
         4399210, 3744815, 3866614, 3633926, 3710115, 3916625, 3934393, 3897747, 3609363]
    )
    nov2014_vids = np.array(
        [1053611, 1069727, 1089903, 1090441, 1079722, 1087294, 1089997, 1093096, 1090282, 1082552, 1117081, 1126668,
         1100581, 1096895, 1107217, 1097527, 1106031, 1109095, 1092158, 1104515, 1097481, 1108041, 1108601, 1125964,
         1120683, 1108512, 1102358, 1062560, 1097597, 1110712])
    nov2014_stats = np.array(
        [5008802, 4038274, 3942462, 4099289, 4342569, 3940914, 4199895, 4492755, 4907989, 4816449, 4297485, 4319194,
         3948367, 3876804, 3808977, 4573585, 4008868, 3871756, 3905043, 3996391, 3955479, 3981957, 4803943, 3988355,
         3912132, 4640300, 4256640, 4887699, 3961716, 3903173])
    dec2014_vids = np.array(
        [1118950, 1125671, 1129734, 1120296, 1123656, 1116426, 1103623, 1117326, 1145008, 1135840, 1123981, 1123405,
         1142044, 1112187, 1118738, 1137397, 1141207, 1143072, 1126599, 1111734, 1090906, 1110318, 1160567, 1146651,
         1013011])
    dec2014_stats = np.array(
        [4231827, 3961357, 4043201, 4250875, 4036084, 3875628, 4720209, 4124329, 4025535, 4510177, 4049821, 3912861,
         4745007, 4765252, 4025583, 4047515, 4105460, 4680456, 4133364, 3905367, 4131409, 4512510, 4172384, 4289182,
         4094030])
    jan2015_vids = np.array(
        [1018018, 1134088, 1016256, 1136823, 1152356, 1140306, 1147104, 1150599, 1153348, 1158371, 1149668, 1162848,
         1149729, 1157594, 1177701, 1165501, 1170576, 1162057, 1168186, 1178996, 1172269, 1200958, 1068490, 1000591,
         1177729, 1201295])
    jan2015_stats = np.array(
        [3664620, 4000866, 3910572, 4099280, 4137905, 5105952, 5738279, 4573815, 4399217, 4456618, 4170935, 4300084,
         4664952, 4531303, 6397695, 4806069, 4641818, 4594745, 4623600, 5068930, 4249784, 4700580, 3845489, 3475905,
         4034006, 4481818])
    feb2015_vids = np.array(
        [1190052, 1167271, 1196665, 1189741, 1108326, 912529, 924105, 950132, 914186, 922875, 933453, 878536, 879952,
         927012, 921433, 933089, 951582, 970266, 951475, 962463, 958707, 996813, 957409, 933297, 872512, 923028, 942810,
         929536])
    feb2015_stats = np.array(
        [4250277, 4523460, 4660123, 4578930, 4090286, 3100976, 3031229, 3166796, 3067113, 3170645, 3172117, 3145633,
         3175059, 3158865, 3115699, 3091305, 3108846, 3066626, 3100275, 3050714, 3110198, 3093652, 3037298, 3035946,
         3161745, 3163134, 3124024, 3116569])
    mar2015_onwards_vids = np.array(
        [969626, 958071, 936400, 938893, 939427, 932712, 945962, 908112, 925769, 933863, 882088, 903970, 927929, 924694,
         919929, 967590, 958842, 971031, 952290, 939625, 936842, 870551, 918568, 892089, 909605, 923442, 918877, 917033,
         881796, 931119, 924092, 909677, 916003, 937254, 941740, 951817, 935795, 900821, 933145, 917005, 909759, 916483,
         920961, 903781, 901701, 900149, 955674, 939148, 952231, 939559, 942680, 938050, 919650, 939482, 858985, 936711,
         916003, 942969, 951118, 934026, 935353, 942109, 937495, 922660, 942942, 911509, 903409, 930438, 957196, 983229,
         955206, 911472, 970793, 983051, 968790, 910667, 963746, 961377, 930979, 961116, 972531, 977260, 969686, 977717,
         919111, 979111, 992709, 997834, 987066, 971687, 997148, 948066, 953601, 974821, 995755, 987976, 987099, 990419,
         973893, 996659, 1012933, 949103, 980481, 978835, 965464, 967175, 957566, 948251, 967340, 972111, 969690,
         985972, 980753, 968441, 983622, 1004070, 965624, 998411, 988870, 1001492, 982947, 903936, 961509, 975014,
         1004350, 992922, 985407, 998535, 995043, 971893, 959932, 961200, 979204, 965799, 968496, 966669, 995161,
         967367, 958883, 962655, 988793, 969153, 997479, 1007389, 1004612, 989014, 981640, 1000331, 1029140, 983658,
         971593, 1019952]
    )
    mar2015_onwards_stats = np.array(
        [3092883, 3089174, 3157087, 3126197, 3093663, 3099562, 3125075, 3225003, 3188682, 3073499, 3186757, 3029201,
         3042078, 3078667, 3180968, 3159529, 3116045, 3125088, 3147579, 3074078, 3141963, 3313526, 3247751, 3185873,
         3214243, 3248468, 3354133, 3346367, 3354192, 3287557, 3312784, 3266076, 3262589, 3260786, 3324996, 3250102,
         3259080, 3245530, 3310178, 3323782, 3350219, 3317898, 3331463, 3320342, 3293417, 3331314, 3212617, 3258124,
         3295804, 3373427, 3390579, 3348694, 3351997, 3330236, 3403783, 3373836, 3351059, 3298061, 3334475, 3278653,
         3300258, 3278869, 3284410, 3268252, 3257894, 3298861, 3390024, 3350667, 3322702, 3275487, 3282946, 3414662,
         3360230, 3329821, 3333309, 3422487, 3424506, 3409472, 3388682, 3375283, 3382641, 3338003, 3347252, 3292975,
         3382297, 3285291, 3279587, 3275951, 3278834, 3304140, 3273608, 3377468, 3392044, 3369845, 3363160, 3344173,
         3331019, 3314588, 3293917, 3182154, 3184056, 3217660, 3048854, 3066828, 3064681, 3023699, 3059828, 3108275,
         3129586, 3145422, 3114516, 3091563, 3066095, 3142683, 3248145, 3189904, 3259193, 3164379, 3111382, 3114652,
         3254447, 3311871, 3240889, 3240311, 3177956, 3220929, 2999857, 3183481, 3289816, 3252307, 3158547, 3314350,
         3228744, 3152962, 3197657, 3229790, 3164472, 3293207, 3232745, 3159655, 2987148, 3240259, 3224170, 3225958,
         3216816, 3241828, 3229219, 3129472, 3147981, 3239810, 3337246, 3229519]
    )
    miss = np.empty(11) * np.nan
    vids_ts = np.hstack((oct2014_before_vids, nov2014_vids, dec2014_vids, miss, jan2015_vids, feb2015_vids, mar2015_onwards_vids))
    stats_ts = np.hstack((oct2014_before_stats, nov2014_stats, dec2014_stats, miss, jan2015_stats, feb2015_stats, mar2015_onwards_stats))

    draw_miss(vids_ts, stats_ts)
